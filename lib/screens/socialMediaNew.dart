import 'dart:io';import 'dart:typed_data';import 'package:flutter/material.dart';import 'package:font_awesome_flutter/font_awesome_flutter.dart';import 'package:flutter_inappwebview/flutter_inappwebview.dart';import 'package:flutter_image_compress/flutter_image_compress.dart';import 'package:path_provider/path_provider.dart';import 'package:provider/provider.dart';import '../providers/campaignData.dart';import '../providers/campComplain.dart';import '../widgets/startingCode.dart';import '../widgets/bottomButtonPink.dart';import '../widgets/alertBox.dart';import '../widgets/textFormBorder.dart';import '../widgets/customDivider.dart';class SocialMediaNew extends StatefulWidget {  static const String id = 'SocialMediaNew';  @override  _SocialMediaNewState createState() => _SocialMediaNewState();}class _SocialMediaNewState extends State<SocialMediaNew> {  InAppWebViewController webView;  Uint8List screenshotBytes;  bool _spinner = true;  bool firstTime = true;  bool _done = true;  bool autoFetch = true;  List<CampaignClass> _data = [];  Media _media;  CampaignClass _newCompleted;  CampComplain _newComplain;  TextEditingController _cancelReason = TextEditingController();  @override  void didChangeDependencies() {    setState(() {    _media = ModalRoute.of(context).settings.arguments;    });    if (_spinner == true && firstTime == true) {      Provider.of<CampaignData>(context, listen: false)          .fetchAvailableCampaign(_media)          .then((value) {        setState(() {          _spinner = false;          firstTime = false;        });      });    }    super.didChangeDependencies();  }  void _reportAlert() {    final _form = GlobalKey<FormState>();    Widget backButton = RawMaterialButton(      onPressed: () {        Navigator.pop(context);      },      child: Text(        'Cancel',        style: Theme.of(context)            .textTheme            .headline2            .copyWith(color: Theme.of(context).primaryColor),      ),    );    Widget submitButton = RawMaterialButton(      onPressed: () {        final isValid = _form.currentState.validate();        if (!isValid) {          return;        }        _form.currentState.save();        Provider.of<CampComplainData>(context, listen: false)            .createComplain(_newComplain)            .then((value) {          if (value == true) {            Provider.of<CampaignData>(context, listen: false).removeData(_data[0].id);            Navigator.pop(context);          } else {            return showDialog(              context: context,              builder: (ctx) => AlertBox(                onPress: () => Navigator.pop(context),              ),            );          }        });      },      child: Text(        'Submit',        style: Theme.of(context)            .textTheme            .headline2            .copyWith(color: Theme.of(context).primaryColor),      ),    );    AlertDialog alert = AlertDialog(      backgroundColor: Color(0xFFFFFFDD),      shape: RoundedRectangleBorder(        borderRadius: const BorderRadius.all(          const Radius.circular(20),        ),        side: BorderSide(          color: Theme.of(context).primaryColor,          width: 2,        ),      ),      title: Text(          "Complain!",        style: Theme.of(context)            .textTheme            .headline1            .copyWith(color: Theme.of(context).primaryColor,        ),      ),      content: Container(        height: 220,        child: Column(          children: [            Text(              'Please write your complain below. Admin will take the decision asap.',              style: Theme.of(context).textTheme.headline2,            ),            Form(              key: _form,              child: TextFormField(                decoration: InputDecoration(                  labelText: 'Write here',                  border: textFormBorder(context),                  enabledBorder: textFormBorder(context),                ),                maxLength: 150,                minLines: 1,                maxLines: 10,                controller: _cancelReason,                onSaved: (val) => _newComplain = CampComplain(                  campaign: _data[0].id,                  author: _data[0].author,                  complain: val,                ),              ),            ),          ],        ),      ),      actions: [backButton, submitButton],    );    showDialog(      context: context,      builder: (BuildContext context) {        return alert;      },    );  }  void _save() {    setState(() {      _spinner = true;    });    Provider.of<CampaignData>(context, listen: false)        .createCompleted(_newCompleted).then((_) {      setState(() {        _spinner = false;        _done = true;      });    });  }  void _next() {    setState(() {      _spinner = true;    });    Provider.of<CampaignData>(context, listen: false)        .next(_newCompleted).then((_) {      setState(() {        _spinner = false;        _done = true;      });    });  }  void _refreshPage() {    Provider.of<CampaignData>(context, listen: false).fetchAvailableCampaign(_media);  }  @override  Widget build(BuildContext context) {    _data = Provider.of<CampaignData>(context).data;    if(_data.isNotEmpty) {      actionIcon = _data[0].action;      if(_data.length == 1 && autoFetch == true) {        _refreshPage();        setState(() {          autoFetch = false;        });      }    }    media = _media;    return StartingCode(      title: mediaString,      widget: _spinner == true ?        Center(          child: CircularProgressIndicator(            backgroundColor: Theme.of(context).primaryColor,          ),        )      : _data.isEmpty ?        Padding(          padding: const EdgeInsets.all(28.0),          child: DefaultTextStyle(            style: Theme.of(context).textTheme.headline2,            child: Column(              mainAxisAlignment: MainAxisAlignment.center,              children: [                const Text(                    'Come back soon! We will get more campaigns for you.',                  textAlign: TextAlign.center,                ),                const Text('You can also try Refreshing the page!'),                const SizedBox(height: 5),                ElevatedButton(                  onPressed: () {                    setState(() {                      autoFetch = true;                    });                    _refreshPage();                  },                  style: ButtonStyle(                    backgroundColor: MaterialStateProperty.all<Color>(                        Theme.of(context).primaryColor                    ),                  ),                  child: Text('Refresh Page',                    style: Theme.of(context).textTheme.button,                  ),                ),              ],            ),          ),        )      : Column(        children: [          Container(            // padding: const EdgeInsets.only(bottom: 12),            child: DefaultTextStyle(              style: Theme.of(context).textTheme.headline2,              child: Row(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  FaIcon(FontAwesomeIcons.longArrowAltDown, color: Theme.of(context).primaryColor, size: 16,),                  FaIcon(FontAwesomeIcons.longArrowAltDown, color: Theme.of(context).accentColor, size: 16,),                  const SizedBox(width: 10),                  Row(                    children: [                      Text('Click '),                      Text(actionString),                      Text(' & then Done'),                      // FaIcon(actionToIcon, color: Theme.of(context).primaryColor, size: 16,),                    ],                  ),                  const SizedBox(width: 10),                  FaIcon(FontAwesomeIcons.longArrowAltDown, color: Theme.of(context).accentColor, size: 16,),                  FaIcon(FontAwesomeIcons.longArrowAltDown, color: Theme.of(context).primaryColor, size: 16,),                ],              ),              // child: Row(              //   mainAxisAlignment: MainAxisAlignment.spaceEvenly,              //   children: [              //     Row(              //       crossAxisAlignment: CrossAxisAlignment.baseline,              //       textBaseline: TextBaseline.alphabetic,              //       children: [              //         const Text('Action Requested: '),              //         Icon(              //           actionToIcon,              //           size: 15,              //           color: Colors.pinkAccent,              //         ),              //       ],              //     ),              //     Row(              //       children: [              //         const Text('Reward:'),              //         Text(              //           _data[0].cost.toString(),              //           style: TextStyle(color: Theme.of(context).primaryColor),              //         ),              //         const Icon(              //           Icons.favorite,              //           size: 15,              //           color: Colors.pink,              //         ),              //       ],              //     ),              //   ],              // ),            ),          ),          CustomDivider(),          Expanded(            child: InAppWebView(              initialUrlRequest: URLRequest(url: Uri.parse(_data[0].pageUrl)),              initialOptions: InAppWebViewGroupOptions(                crossPlatform: InAppWebViewOptions(),              ),              onWebViewCreated: (controller) {                webView = controller;              },              // onLoadStart: (InAppWebViewController controller, String url) {},            ),          ),          const SizedBox(height: 85),        ],      ),      bottomS: _data.isEmpty ?      const SizedBox(height: 0)      : Container(        height: 80,        color: Colors.white70,        child: Row(          mainAxisAlignment: MainAxisAlignment.spaceAround,          children: [            BottomButtonPink(              onPress: () {                return showDialog(                  context: context,                  builder: (context) => AlertBox(                    title: 'Information!',                    body: '```$actionString  the post & click Done to get ${_data[0].cost} Hearts.```  Do not click Done without clicking on $actionString. It will lead to penalty.',                    onPress: () => Navigator.pop(context),                  ),                );              },              icon: FontAwesomeIcons.info,              label: 'Info',            ),            BottomButtonPink(              onPress: () => _reportAlert(),              icon: FontAwesomeIcons.solidFlag,              label: 'Report',            ),            BottomButtonPink(              onPress: _done == false ? (){}              :() async {                setState(() {                  _done = false;                });                final result = await webView.takeScreenshot();                /// compress file                var image = await FlutterImageCompress.compressWithList(                  result,                  minHeight: 960,                  minWidth: 540,                  quality: 40,                );                final directory = (await getApplicationDocumentsDirectory()).path;                String fileName = DateTime.now().toIso8601String();                var path = '$directory/$fileName.png';                // File imageFile = await File(path).writeAsBytes(image);                String snippetString = (await File(path).writeAsBytes(image)).path;                _newCompleted = CampaignClass(                  id: _data[0].id,                  author: _data[0].author,                  urlImage: snippetString,                  premium: 0,                );                _save();              },              icon: FontAwesomeIcons.check,              label: 'Done',            ),            BottomButtonPink(              onPress: () {                setState(() {                  _done = false;                });                _newCompleted = CampaignClass(                  id: _data[0].id,                  author: _data[0].author,                  premium: 0,                );                _next();              },              icon: FontAwesomeIcons.chevronRight,              label: 'Next',            ),          ],        ),      ),    );  }}